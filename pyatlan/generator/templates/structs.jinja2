# SPDX-License-Identifier: Apache-2.0
# Copyright 2024 Atlan Pte. Ltd.

from __future__ import annotations

from datetime import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Set, Union

from pydantic.v1 import BaseModel, Extra, Field, root_validator

from pyatlan.model.enums import (
    AtlanConnectorType,
    BadgeComparisonOperator,
    BadgeConditionColor,
    SourceCostUnitType,
)
from pyatlan.model.utils import to_camel_case
from pyatlan.utils import select_optional_set_fields, validate_required_fields

if TYPE_CHECKING:
    from pyatlan.cache.source_tag_cache import SourceTagName


class AtlanObject(BaseModel):
    class Config:
        allow_population_by_field_name = True
        alias_generator = to_camel_case
        extra = Extra.ignore
        json_encoders = {datetime: lambda v: int(v.timestamp() * 1000)}
        validate_assignment = True

    @root_validator(pre=True)
    def flatten_structs_attributes(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        """
        Flatten the 'attributes' of the struct models.

        :param values: dictionary containing the attributes.
        :returns: modified dictionary with attributes flattened.
        """
        attributes = values.pop("attributes", {})
        values = {**values, **attributes}
        return values


{% for struct in struct_defs %}
class {{struct.name}}(AtlanObject):
    """Description"""
    {%- if struct.name == "BadgeCondition" %}
    @classmethod
    def create(
        cls,
        *,
        badge_condition_operator: BadgeComparisonOperator,
        badge_condition_value: str,
        badge_condition_colorhex: Union[BadgeConditionColor, str]
    ) -> "BadgeCondition":
        validate_required_fields(
            [
                "badge_condition_operator",
                "badge_condition_value",
                "badge_condition_colorhex",
            ],
            [badge_condition_operator, badge_condition_value, badge_condition_colorhex],
        )
        return cls(
            badge_condition_operator=badge_condition_operator.value,
            badge_condition_value=badge_condition_value,
            badge_condition_colorhex=badge_condition_colorhex.value
            if isinstance(badge_condition_colorhex, BadgeConditionColor)
            else badge_condition_colorhex,
        )
    {% endif %}
    {%- for attribute_def in struct.attribute_defs %}
    {%- set type = attribute_def.type_name | get_type %}
    {{attribute_def.name | to_snake_case }}: {% if attribute_def.is_optional %}Optional[{% endif %}{{type}}{% if attribute_def.is_optional %}]{% endif %} = Field({% if attribute_def.is_optional %}default=None,{% endif %} description='' )
    {%- endfor %}
    {%- if struct.name == "SourceTagAttachment" %}
    @classmethod
    def by_name(
        cls,
        name: SourceTagName,
        source_tag_values: List[SourceTagAttachmentValue],
        source_tag_sync_timestamp: Optional[datetime] = None,
        is_source_tag_synced: Optional[bool] = None,
        source_tag_sync_error: Optional[str] = None,
    ):
        from pyatlan.cache.source_tag_cache import SourceTagCache
        """
        Create a source-synced tag attachment with
        a particular value when the attachment is synced to the source.

        :param client: connectivity to an Atlan tenant
        :param name: unique name of the source tag in Atlan
        :param source_tag_values: value of the tag attachment from the source
        :param is_source_tag_synced: whether the tag attachment has been synced at the source (True) or not (False)
        :param source_tag_sync_timestamp: time (epoch) when the tag attachment was synced at the source, in milliseconds
        :param source_tag_sync_error: error message if the tag attachment sync at the source failed
        :returns: a SourceTagAttachment with the provided information
        :raises AtlanError: on any error communicating via the underlying APIs
        :raises NotFoundError: if the source-synced tag cannot be resolved
        """
        tag = SourceTagCache.get_by_name(name)
        tag_connector_name = AtlanConnectorType._get_connector_type_from_qualified_name(
            tag.qualified_name or ""
        )
        return cls.of(
            source_tag_name=tag.name,
            source_tag_qualified_name=tag.qualified_name,
            source_tag_guid=tag.guid,
            source_tag_connector_name=tag_connector_name,
            source_tag_values=source_tag_values,
            **select_optional_set_fields(
                dict(
                    is_source_tag_synced=is_source_tag_synced,
                    source_tag_sync_timestamp=source_tag_sync_timestamp,
                    source_tag_sync_error=source_tag_sync_error,
                )
            ),
        )
    @classmethod
    def by_qualified_name(
        cls,
        source_tag_qualified_name: str,
        source_tag_values: List[SourceTagAttachmentValue],
        source_tag_sync_timestamp: Optional[datetime] = None,
        is_source_tag_synced: Optional[bool] = None,
        source_tag_sync_error: Optional[str] = None,
    ):
        from pyatlan.cache.source_tag_cache import SourceTagCache
        """
        Create a source-synced tag attachment with
        a particular value when the attachment is synced to the source.

        :param client: connectivity to an Atlan tenant
        :param source_tag_qualified_name: unique name of the source tag in Atlan
        :param source_tag_values: value of the tag attachment from the source
        :param is_source_tag_synced: whether the tag attachment has been synced at the source (True) or not (False)
        :param source_tag_sync_timestamp: time (epoch) when the tag attachment was synced at the source, in milliseconds
        :param source_tag_sync_error: error message if the tag attachment sync at the source failed
        :returns: a SourceTagAttachment with the provided information
        :raises AtlanError: on any error communicating via the underlying APIs
        :raises NotFoundError: if the source-synced tag cannot be resolved
        """
        tag = SourceTagCache.get_by_qualified_name(source_tag_qualified_name)
        tag_connector_name = AtlanConnectorType._get_connector_type_from_qualified_name(
            source_tag_qualified_name or ""
        )
        return cls.of(
            source_tag_name=tag.name,
            source_tag_qualified_name=source_tag_qualified_name,
            source_tag_guid=tag.guid,
            source_tag_connector_name=tag_connector_name,
            source_tag_values=source_tag_values,
            **select_optional_set_fields(
                dict(
                    is_source_tag_synced=is_source_tag_synced,
                    source_tag_sync_timestamp=source_tag_sync_timestamp,
                    source_tag_sync_error=source_tag_sync_error,
                )
            ),
        )
    @classmethod
    def of(
        cls,
        source_tag_name: Optional[str] = None,
        source_tag_qualified_name: Optional[str] = None,
        source_tag_guid: Optional[str] = None,
        source_tag_connector_name: Optional[str] = None,
        source_tag_values: Optional[List[SourceTagAttachmentValue]] = None,
        is_source_tag_synced: Optional[bool] = None,
        source_tag_sync_timestamp: Optional[datetime] = None,
        source_tag_sync_error: Optional[str] = None,
    ):
        """
        Quickly create a new SourceTagAttachment.

        :param source_tag_name: simple name of the source tag
        :param source_tag_qualified_name: unique name of the source tag in Atlan
        :param source_tag_guid: unique identifier (GUID) of the source tag in Atlan
        :param source_tag_connector_name: connector that is the source of the tag
        :param source_tag_values: value of the tag attachment from the source
        :param is_source_tag_synced: whether the tag attachment has been synced at the source (True) or not (False)
        :param source_tag_sync_timestamp: time (epoch) when the tag attachment was synced at the source, in milliseconds
        :param source_tag_sync_error: error message if the tag attachment sync at the source failed
        :returns: a SourceTagAttachment with the provided information
        """
        return SourceTagAttachment(
            **select_optional_set_fields(
                dict(
                    source_tag_name=source_tag_name,
                    source_tag_qualified_name=source_tag_qualified_name,
                    source_tag_guid=source_tag_guid,
                    source_tag_connector_name=source_tag_connector_name,
                    source_tag_value=source_tag_values,
                    is_source_tag_synced=is_source_tag_synced,
                    source_tag_sync_timestamp=source_tag_sync_timestamp,
                    source_tag_sync_error=source_tag_sync_error,
                )
            ),
        )
    {% endif %}
{% endfor %}

{% for struct in struct_defs %}
{{struct.name}}.update_forward_refs()
{% endfor %}
