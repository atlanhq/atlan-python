{%- macro gen_properties(entity_def, attribute_defs) %}
    _convenience_properties: ClassVar[List[str]] = [
        {%- for attribute_def in attribute_defs %}
        "{{ 'assigned_terms' if attribute_def.name == 'meanings' else attribute_def.name | to_snake_case }}",
        {%- endfor %}]

    {%- for attribute_def in attribute_defs %}
    {%- set type = attribute_def.typeName | get_type %}
    {%- set property_type %}Optional[{{type}}]{% endset %}
    {%- set attribute_name =  attribute_def.name | to_snake_case %}
    {%- set property_name =  'assigned_terms' if attribute_def.name == 'meanings' else attribute_def.name | to_snake_case %}
    {% if property_name in ("upstream_tables", "upstream_datasources") %}
    @property
    def {{ property_name }}(self)->Optional[List[Dict[str, Optional[str]]]]:
        return None if self.attributes is None else self.attributes.{{ attribute_name }}
    @{{ property_name }}.setter
    def {{ property_name }}(self, {{ property_name }}: Optional[List[Dict[str, Optional[str]]]]):
        if self.attributes is None:
            self.attributes = self.Attributes()
        self.attributes.{{ attribute_name }} = {{ property_name }}
    {% else %}
    @property
    def {{ property_name }}(self)->{{ property_type }}:
        return None if self.attributes is None else self.attributes.{{ attribute_name }}
    @{{ property_name }}.setter
    def {{ property_name }}(self, {{ property_name }}:{{ property_type }}):
        if self.attributes is None:
            self.attributes = self.Attributes()
        {% if property_name == "parent_category" -%}
        if not parent_category:
            self.relationship_attributes = {"parentCategory": None}
        {% endif -%}
        self.attributes.{{ attribute_name }} = {{ property_name }}
    {% endif %}
    {%- endfor %}
{% endmacro %}

{%- macro gen_property_class_vars(type_name, attribute_defs) %}
    {%- for attribute_def in attribute_defs %}{% if attribute_def.name != "inputs" and attribute_def.name != "outputs" %}
    {%- set search_type = attribute_def | get_search_type %}
    {{ attribute_def.name | get_class_var_for_attr }}: ClassVar[{{ search_type.name }}] = {{ search_type.name }}("{{ attribute_def.name }}"{% if search_type.args %}, {{ search_type.args }}{% endif %})
    """
    {{ attribute_def.description | default("TBC") }}
    """{% if attribute_def.description | length > 116 %}  # noqa: E501{% endif %}

    {%- endif %}{%- endfor %}
{% endmacro %}

{%- macro gen_property_relationship_class_vars(type_name, relationship_attribute_defs) %}
    {%- for attribute_def in relationship_attribute_defs %}{% if (type_name != "AtlasGlossaryTerm" or attribute_def.name != "categories") and (type_name != "AtlasGlossaryCategory" or attribute_def.name != "parentCategory") and ((type_name != "AtlasGlossaryTerm" or type_name != "AtlasGlossaryCategory") and attribute_def.name != "anchor") and (type_name != "Asset" or attribute_def.name != "meanings") %}
    {{ attribute_def.name | get_class_var_for_attr }}: ClassVar[RelationField] = RelationField("{{ attribute_def.name }}")
    """
    {{ attribute_def.description | default("TBC") }}
    """

    {%- endif %}{%- endfor %}
{% endmacro %}
