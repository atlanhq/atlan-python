
        @classmethod
        @init_guid
        def create(
            cls,
            *,
            name: str,
            parent_qualified_name: str,
            parent_type: type,
            order: int,
            parent_name: Optional[str] = None,
            database_name: Optional[str] = None,
            database_qualified_name: Optional[str] = None,
            schema_name: Optional[str] = None,
            schema_qualified_name: Optional[str] = None,
            table_name: Optional[str] = None,
            table_qualified_name: Optional[str] = None,
            connection_qualified_name: Optional[str] = None,
        ) -> Column.Attributes:
            validate_required_fields(
                ["name", "parent_qualified_name", "parent_type", "order"],
                [name, parent_qualified_name, parent_type, order],
            )

            fields = parent_qualified_name.split("/")
            if connection_qualified_name:
                connector_name = AtlanConnectorType.get_connector_name(
                    connection_qualified_name
                )
            else:
                connection_qn, connector_name = AtlanConnectorType.get_connector_name(
                    parent_qualified_name, "parent_qualified_name", 6
                )
            if order < 0:
                raise ValueError("Order must be be a positive integer")

            column = Column.Attributes(
                name=name,
                order=order,
                connector_name=connector_name,
                connection_qualified_name=connection_qualified_name or connection_qn,
                qualified_name=f"{parent_qualified_name}/{name}",
                schema_name=schema_name or fields[4],
                schema_qualified_name=schema_qualified_name
                or f"{fields[0]}/{fields[1]}/{fields[2]}/{fields[3]}/{fields[4]}",
                database_name=database_name or fields[3],
                database_qualified_name=database_qualified_name
                or f"{fields[0]}/{fields[1]}/{fields[2]}/{fields[3]}",
            )

            if parent_type == Table:
                column.table_qualified_name = parent_qualified_name
                column.table = Table.ref_by_qualified_name(parent_qualified_name)
                column.table_name = parent_name or fields[5]
            elif parent_type == View:
                column.view_qualified_name = parent_qualified_name
                column.view = View.ref_by_qualified_name(parent_qualified_name)
                column.view_name = parent_name or fields[5]
            elif parent_type == MaterialisedView:
                column.view_qualified_name = parent_qualified_name
                column.materialised_view = MaterialisedView.ref_by_qualified_name(
                    parent_qualified_name
                )
                column.view_name = parent_name or fields[5]
            elif parent_type == TablePartition:
                column.table_qualified_name = table_qualified_name
                column.table_partition = TablePartition.ref_by_qualified_name(
                    parent_qualified_name
                )
                column.table_name = table_name or fields[5]
            else:
                raise ValueError(
                    "parent_type must be either Table, View, MaterializeView or TablePartition"
                )
            return column
