
        @classmethod
        @init_guid
        def create(
            cls,
            *,
            name: str,
            parent_qualified_name: str,
            parent_type: type,
            order: int,
            parent_name: Optional[str] = None,
            database_name: Optional[str] = None,
            database_qualified_name: Optional[str] = None,
            schema_name: Optional[str] = None,
            schema_qualified_name: Optional[str] = None,
            table_name: Optional[str] = None,
            table_qualified_name: Optional[str] = None,
            connection_qualified_name: Optional[str] = None,
        ) -> Column.Attributes:
            """
            Builds the minimal object necessary to create a Column.

            :param name: name of the Column
            :param parent_qualified_name: unique name of the table / view / materialized view
            / table partition / snowflake dynamic table in which this Column exist
            :param parent_type: type of parent (table, view, materialized view,
            table partition, snowflake dynamic table), should be a TYPE_NAME static string
            :param order: the order the Column appears within its parent (the Column's position)
            :param parent_name: simple name of the table / view / materialized view
            / table partition / snowflake dynamic table in which the Column is created
            :param database_name: simple name of the database in which the Column should be created
            :param database_qualified_name: unique name of the database in which the Column should be created
            :param schema_name: simple name of the schema in which the Column should be created
            :param schema_qualified_name: unique name of the schema in which the Column should be created
            :param table_name: (deprecated - unused)
            :param table_qualified_name: (deprecated - unused)
            :param connection_qualified_name: unique name of the connection in which the Column should be created
            :returns: the minimal request necessary to create the Column
            """
            validate_required_fields(
                ["name", "parent_qualified_name", "parent_type", "order"],
                [name, parent_qualified_name, parent_type, order],
            )
            if connection_qualified_name:
                connector_name = AtlanConnectorType.get_connector_name(
                    connection_qualified_name
                )
            else:
                connection_qn, connector_name = AtlanConnectorType.get_connector_name(
                    parent_qualified_name, "parent_qualified_name", 6
                )
            if order < 0:
                raise ValueError("Order must be be a positive integer")

            fields = parent_qualified_name.split("/")
            qualified_name = f"{parent_qualified_name}/{name}"
            connection_qualified_name = connection_qualified_name or connection_qn
            database_name = database_name or fields[3]
            schema_name = schema_name or fields[4]
            parent_name = parent_name or fields[5]
            database_qualified_name = (
                database_qualified_name
                or f"{connection_qualified_name}/{database_name}"
            )
            schema_qualified_name = (
                schema_qualified_name or f"{database_qualified_name}/{schema_name}"
            )

            column = Column.Attributes(
                name=name,
                order=order,
                qualified_name=qualified_name,
                connector_name=connector_name,
                connection_qualified_name=connection_qualified_name,
                schema_name=schema_name,
                schema_qualified_name=schema_qualified_name,
                database_name=database_name,
                database_qualified_name=database_qualified_name,
            )

            if parent_type == Table:
                column.table_qualified_name = parent_qualified_name
                column.table = Table.ref_by_qualified_name(parent_qualified_name)
                column.table_name = parent_name
            elif parent_type == View:
                column.view_qualified_name = parent_qualified_name
                column.view = View.ref_by_qualified_name(parent_qualified_name)
                column.view_name = parent_name
            elif parent_type == MaterialisedView:
                column.view_qualified_name = parent_qualified_name
                column.materialised_view = MaterialisedView.ref_by_qualified_name(
                    parent_qualified_name
                )
                column.view_name = parent_name
            elif parent_type == TablePartition:
                column.table_qualified_name = parent_qualified_name
                column.table_partition = TablePartition.ref_by_qualified_name(
                    parent_qualified_name
                )
                column.table_name = parent_name
            elif parent_type == SnowflakeDynamicTable:
                column.table_qualified_name = parent_qualified_name
                column.snowflake_dynamic_table = (
                    SnowflakeDynamicTable.ref_by_qualified_name(parent_qualified_name)
                )
                column.table_name = parent_name
            else:
                raise ValueError(
                    "parent_type must be either Table, SnowflakeDynamicTable, View, MaterializeView or TablePartition"
                )
            return column
