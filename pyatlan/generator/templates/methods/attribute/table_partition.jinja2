
        @classmethod
        @init_guid
        def creator(
            cls,
            *,
            name: str,
            connection_qualified_name: Optional[str] = None,
            database_name: Optional[str] = None,
            database_qualified_name: Optional[str] = None,
            schema_name: Optional[str] = None,
            schema_qualified_name: Optional[str] = None,
            table_name: Optional[str] = None,
            table_qualified_name: str,
        ) -> TablePartition.Attributes:
            """
            Builds the minimal object necessary to create a table partition.

            :param name: name of the TablePartition
            :param connection_qualified_name: unique name of the connection in which to create the TablePartition
            :param database_name: simple name of the Database in which to create the TablePartition
            :param database_qualified_name: unique name of the Database in which to create the TablePartition
            :param schema_name: simple name of the Schema in which to create the TablePartition
            :param schema_qualified_name: unique name of the Schema in which to create the TablePartition
            :param table_name: simple name of the Table in which to create the TablePartition
            :param table_qualified_name: unique name of the table in which this table partition exists
            :returns: the minimal request necessary to create the table partition
            """
            validate_required_fields(
                ["name", "table_qualified_name"],
                [name, table_qualified_name],
            )
            assert table_qualified_name  # noqa: S101
            if connection_qualified_name:
                connector_name = AtlanConnectorType.get_connector_name(
                    connection_qualified_name
                )
            else:
                connection_qn, connector_name = AtlanConnectorType.get_connector_name(
                    table_qualified_name, "table_qualified_name", 6
                )

            fields = table_qualified_name.split("/")

            connection_qualified_name = connection_qualified_name or connection_qn
            database_name = database_name or fields[3]
            schema_name = schema_name or fields[4]
            table_name = table_name or fields[5]
            database_qualified_name = (
                database_qualified_name
                or f"{connection_qualified_name}/{database_name}"
            )
            schema_qualified_name = (
                schema_qualified_name or f"{database_qualified_name}/{schema_name}"
            )

            qualified_name = f"{schema_qualified_name}/{name}"

            return TablePartition.Attributes(
                name=name,
                qualified_name=qualified_name,
                database_name=database_name,
                database_qualified_name=database_qualified_name,
                schema_name=schema_name,
                schema_qualified_name=schema_qualified_name,
                connector_name=connector_name,
                connection_qualified_name=connection_qualified_name,
                table_name=table_name,
                table_qualified_name=table_qualified_name,
            )
