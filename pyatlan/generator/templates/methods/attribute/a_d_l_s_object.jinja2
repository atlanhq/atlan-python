
        @classmethod
        @init_guid
        def create(
            cls,
            *,
            name: str,
            adls_container_name: str,
            adls_container_qualified_name: str,
            adls_account_qualified_name: Optional[str] = None,
            connection_qualified_name: Optional[str] = None,
        ) -> ADLSObject.Attributes:
            validate_required_fields(
                ["name", "adls_container_name", "adls_container_qualified_name"],
                [name, adls_container_name, adls_container_qualified_name],
            )
            if connection_qualified_name:
                connector_name = AtlanConnectorType.get_connector_name(
                    connection_qualified_name
                )
            else:
                connection_qn, connector_name = AtlanConnectorType.get_connector_name(
                    adls_container_qualified_name, "adls_container_qualified_name", 5
                )
            adls_account_qualified_name = (
                adls_account_qualified_name
                or get_parent_qualified_name(adls_container_qualified_name)
            )
            return ADLSObject.Attributes(
                name=name,
                adls_container_qualified_name=adls_container_qualified_name,
                adls_container_name=adls_container_name,
                qualified_name=f"{adls_container_qualified_name}/{name}",
                connector_name=connector_name,
                connection_qualified_name=connection_qualified_name or connection_qn,
                adls_container=ADLSContainer.ref_by_qualified_name(
                    adls_container_qualified_name
                ),
                adls_account_qualified_name=adls_account_qualified_name,
                adls_account_name=adls_account_qualified_name.split("/")[-1],
            )

        @classmethod
        @init_guid
        def creator_with_prefix(
            cls,
            *,
            name: str,
            connection_qualified_name: str,
            adls_container_name: str,
            adls_container_qualified_name: str,
            adls_account_qualified_name: Optional[str] = None,
            prefix: str = "",
        ) -> ADLSObject.Attributes:
            validate_required_fields(
                [
                    "name",
                    "connection_qualified_name",
                    "adls_container_name",
                    "adls_container_qualified_name",
                ],
                [
                    name,
                    connection_qualified_name,
                    adls_container_name,
                    adls_container_qualified_name,
                ],
            )
            connector_name = AtlanConnectorType.get_connector_name(
                connection_qualified_name
            )
            adls_account_qualified_name = (
                adls_account_qualified_name
                or get_parent_qualified_name(adls_container_qualified_name)
            )
            object_key = construct_object_key(prefix, name)
            return ADLSObject.Attributes(
                name=name,
                adls_object_key=object_key,
                adls_container_qualified_name=adls_container_qualified_name,
                adls_container_name=adls_container_name,
                qualified_name=f"{adls_container_qualified_name}/{object_key}",
                connector_name=connector_name,
                connection_qualified_name=connection_qualified_name,
                adls_container=ADLSContainer.ref_by_qualified_name(
                    adls_container_qualified_name
                ),
                adls_account_qualified_name=adls_account_qualified_name,
                adls_account_name=adls_account_qualified_name.split("/")[-1],
            )
