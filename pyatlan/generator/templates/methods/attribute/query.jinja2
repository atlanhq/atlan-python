
        @classmethod
        @init_guid
        def creator(
            cls,
            *,
            name: str,
            collection_qualified_name: Optional[str] = None,
            parent_folder_qualified_name: Optional[str] = None,
        ) -> Query.Attributes:
            from pyatlan.model.assets import Collection, Folder

            validate_required_fields(["name"], [name])

            if not (parent_folder_qualified_name or collection_qualified_name):
                raise ValueError(
                    "Either 'collection_qualified_name' or 'parent_folder_qualified_name' to be specified."
                )

            if not parent_folder_qualified_name:
                qualified_name = f"{collection_qualified_name}/{name}"
                parent_qn = collection_qualified_name
                parent = Collection.ref_by_qualified_name(
                    collection_qualified_name or ""
                )

            else:
                tokens = parent_folder_qualified_name.split("/")
                if len(tokens) < 4:
                    raise ValueError("Invalid collection_qualified_name")
                collection_qualified_name = (
                    f"{tokens[0]}/{tokens[1]}/{tokens[2]}/{tokens[3]}"
                )
                qualified_name = f"{parent_folder_qualified_name}/{name}"
                parent_qn = parent_folder_qualified_name
                parent = Folder.ref_by_qualified_name(parent_folder_qualified_name)  # type: ignore[assignment]

            return Query.Attributes(
                name=name,
                qualified_name=qualified_name,
                collection_qualified_name=collection_qualified_name,
                parent=parent,
                parent_qualified_name=parent_qn,
            )
