
        @classmethod
        @init_guid
        def creator(
            cls,
            *,
            name: str,
            quick_sight_dataset_qualified_name: str,
            quick_sight_id: str,
            quick_sight_dataset_field_type: Optional[QuickSightDatasetFieldType] = None,
            connection_qualified_name: Optional[str] = None,
        ) -> QuickSightDatasetField.Attributes:
            validate_required_fields(
                ["name", "quick_sight_id", "quick_sight_dataset_qualified_name"],
                [name, quick_sight_id, quick_sight_dataset_qualified_name],
            )
            assert quick_sight_dataset_qualified_name
            if connection_qualified_name:
                connector_name = AtlanConnectorType.get_connector_name(
                    connection_qualified_name
                )
            else:
                connection_qn, connector_name = AtlanConnectorType.get_connector_name(
                    quick_sight_dataset_qualified_name,
                    "quick_sight_dataset_qualified_name",
                    4,
                )
            connection_qualified_name = connection_qualified_name or connection_qn
            return QuickSightDatasetField.Attributes(
                name=name,
                quick_sight_dataset_qualified_name=quick_sight_dataset_qualified_name,
                quick_sight_id=quick_sight_id,
                quick_sight_dataset=QuickSightDataset.ref_by_qualified_name(
                    quick_sight_dataset_qualified_name
                ),
                qualified_name=f"{quick_sight_dataset_qualified_name}/{quick_sight_id}",
                connection_qualified_name=connection_qualified_name,
                connector_name=connector_name,
                quick_sight_dataset_field_type=quick_sight_dataset_field_type,
            )
