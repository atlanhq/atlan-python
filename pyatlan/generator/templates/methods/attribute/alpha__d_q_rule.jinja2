        @staticmethod
        def _get_template_config_value(
            config_value: str,
            property_name: Optional[str] = None,
            value_key: str = "default",
        ):
            if not config_value:
                return None

            try:
                config_json = json.loads(config_value)

                if property_name:
                    properties = config_json.get("properties", {})
                    field = properties.get(property_name, {})
                    return field.get(value_key)
                else:
                    return config_json.get(value_key)
            except (json.JSONDecodeError, KeyError):
                return None

        @staticmethod
        def _validate_template_features(
            rule_type: str,
            rule_conditions: Optional[str],
            row_scope_filtering_enabled: Optional[bool],
            template_config: Optional[dict],
            threshold_compare_operator: Optional[
                alpha_DQRuleThresholdCompareOperator
            ] = None,
            asset: Optional[Asset] = None,
        ) -> Optional[alpha_DQRuleThresholdCompareOperator]:
            if not template_config or not template_config.get("config"):
                return None

            config = template_config["config"]

            if (
                rule_conditions
                and config.alpha_dq_rule_template_config_rule_conditions is None
            ):
                raise ErrorCode.DQ_RULE_TYPE_NOT_SUPPORTED.exception_with_parameters(
                    rule_type, "rule conditions"
                )

            if row_scope_filtering_enabled:
                advanced_settings = (
                    config.alpha_dq_rule_template_advanced_settings or ""
                )
                if "alpha_dqRuleRowScopeFilteringEnabled" not in str(advanced_settings):
                    raise ErrorCode.DQ_RULE_TYPE_NOT_SUPPORTED.exception_with_parameters(
                        rule_type, "row scope filtering"
                    )

                if asset and not getattr(
                    asset,
                    "alpha_asset_d_q_row_scope_filter_column_qualified_name",
                    None,
                ):
                    raise ErrorCode.DQ_ROW_SCOPE_FILTER_COLUMN_MISSING.exception_with_parameters(
                        getattr(asset, "qualified_name", "unknown")
                    )

            if rule_conditions:
                allowed_rule_conditions = (
                    alpha_DQRule.Attributes._get_template_config_value(
                        config.alpha_dq_rule_template_config_rule_conditions or "",
                        None,
                        "enum",
                    )
                )
                if allowed_rule_conditions:
                    try:
                        rule_conditions_json = json.loads(rule_conditions)
                        conditions = rule_conditions_json.get("conditions", [])
                        if len(conditions) != 1:
                            raise ErrorCode.DQ_RULE_CONDITIONS_INVALID.exception_with_parameters(
                                f"exactly one condition required, found {len(conditions)}"
                            )
                        condition_type = conditions[0].get("type")
                    except json.JSONDecodeError:
                        condition_type = rule_conditions

                    if condition_type not in allowed_rule_conditions:
                        raise ErrorCode.DQ_RULE_CONDITIONS_INVALID.exception_with_parameters(
                            f"condition type '{condition_type}' not supported, allowed: {allowed_rule_conditions}"
                        )

                if threshold_compare_operator is None:
                    return alpha_DQRuleThresholdCompareOperator.EQUAL
                elif (
                    threshold_compare_operator
                    != alpha_DQRuleThresholdCompareOperator.EQUAL
                ):
                    raise ErrorCode.INVALID_PARAMETER_VALUE.exception_with_parameters(
                        f"threshold_compare_operator={threshold_compare_operator.value}",
                        "threshold_compare_operator",
                        "EQUAL when rule_conditions are provided",
                    )

            if threshold_compare_operator is not None:
                allowed_operators = alpha_DQRule.Attributes._get_template_config_value(
                    config.alpha_dq_rule_template_config_threshold_object,
                    "alpha_dqRuleTemplateConfigThresholdCompareOperator",
                    "enum",
                )
                if (
                    allowed_operators
                    and threshold_compare_operator.value not in allowed_operators
                ):
                    raise ErrorCode.INVALID_PARAMETER_VALUE.exception_with_parameters(
                        f"threshold_compare_operator={threshold_compare_operator.value}",
                        "threshold_compare_operator",
                        f"must be one of {allowed_operators}",
                    )
            elif threshold_compare_operator is None:
                default_value = alpha_DQRule.Attributes._get_template_config_value(
                    config.alpha_dq_rule_template_config_threshold_object,
                    "alpha_dqRuleTemplateConfigThresholdCompareOperator",
                    "default",
                )
                if default_value:
                    threshold_compare_operator = alpha_DQRuleThresholdCompareOperator(
                        default_value
                    )

            return (
                threshold_compare_operator
                or alpha_DQRuleThresholdCompareOperator.LESS_THAN_EQUAL
            )

        @staticmethod
        def _generate_config_arguments_raw(
            *,
            is_alert_enabled: bool = True,
            custom_sql: Optional[str] = None,
            display_name: Optional[str] = None,
            dimension: Optional[alpha_DQDimension] = None,
            compare_operator: alpha_DQRuleThresholdCompareOperator,
            threshold_value: int,
            threshold_unit: Optional[alpha_DQRuleThresholdUnit] = None,
            column: Optional[Asset] = None,
            dq_priority: alpha_DQRuleAlertPriority,
            description: Optional[str] = None,
            rule_conditions: Optional[str] = None,
            row_scope_filtering_enabled: Optional[bool] = None,
        ) -> str:
            config = {
                "isAlertEnabled": is_alert_enabled,
                "alpha_dqRuleTemplateConfigThresholdObject": {
                    "alpha_dqRuleTemplateConfigThresholdCompareOperator": compare_operator,
                    "alpha_dqRuleTemplateConfigThresholdValue": threshold_value,
                    "alpha_dqRuleTemplateConfigThresholdUnit": threshold_unit,
                },
                "alpha_dqRuleTemplateAdvancedSettings.dqPriority": dq_priority,
            }

            if column is not None:
                config["alpha_dqRuleTemplateConfigBaseColumnQualifiedName"] = (
                    column.qualified_name
                )

            if description is not None:
                config["alpha_dqRuleTemplateConfigUserDescription"] = description

            if custom_sql is not None:
                config["alpha_dqRuleTemplateConfigCustomSQL"] = custom_sql

            if display_name is not None:
                config["alpha_dqRuleTemplateConfigDisplayName"] = display_name

            if dimension is not None:
                config["alpha_dqRuleTemplateConfigDimension"] = dimension

            if rule_conditions is not None:
                config["alpha_dqRuleTemplateConfigRuleConditions"] = json.loads(
                    rule_conditions
                )

            if row_scope_filtering_enabled is not None:
                config[
                    "alpha_dqRuleTemplateAdvancedSettings.alpha_dqRuleRowScopeFilteringEnabled"
                ] = row_scope_filtering_enabled

            return json.dumps(config)

        @staticmethod
        def _generate_uuid():
            d = int(time.time() * 1000)
            random_bytes = uuid.uuid4().bytes
            rand_index = 0

            def replace_char(c):
                nonlocal d, rand_index
                r = (d + random_bytes[rand_index % 16]) % 16
                rand_index += 1
                d = d // 16
                if c == "x":
                    return hex(r)[2:]
                elif c == "y":
                    return hex((r & 0x3) | 0x8)[2:]  # y -> 8 to b
                else:
                    return c

            template = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
            uuid_str = "".join(replace_char(c) if c in "xy" else c for c in template)
            return uuid_str

        @classmethod
        @init_guid
        def creator(
            cls,
            *,
            client: AtlanClient,
            rule_name: str,
            rule_type: str,
            asset: Asset,
            threshold_compare_operator: alpha_DQRuleThresholdCompareOperator,
            threshold_value: int,
            alert_priority: alpha_DQRuleAlertPriority,
            column: Optional[Asset] = None,
            threshold_unit: Optional[alpha_DQRuleThresholdUnit] = None,
            dimension: Optional[alpha_DQDimension] = None,
            custom_sql: Optional[str] = None,
            description: Optional[str] = None,
            rule_conditions: Optional[str] = None,
            row_scope_filtering_enabled: Optional[bool] = False,
        ) -> alpha_DQRule.Attributes:
            template_config = client.dq_template_config_cache.get_template_config(
                rule_type
            )

            if template_config is None:
                raise ErrorCode.DQ_RULE_NOT_FOUND.exception_with_parameters(rule_type)

            template_rule_name = template_config.get("name")
            template_qualified_name = template_config.get("qualified_name")

            if dimension is None:
                dimension = template_config.get("dimension")

            if threshold_unit is None:
                config = template_config.get("config")
                if config is not None:
                    threshold_unit = alpha_DQRule.Attributes._get_template_config_value(
                        config.alpha_dq_rule_template_config_threshold_object,
                        "alpha_dqRuleTemplateConfigThresholdUnit",
                        "default",
                    )

            config_arguments_raw = (
                alpha_DQRule.Attributes._generate_config_arguments_raw(
                    is_alert_enabled=True,
                    custom_sql=custom_sql,
                    display_name=rule_name,
                    dimension=dimension,
                    compare_operator=threshold_compare_operator,
                    threshold_value=threshold_value,
                    threshold_unit=threshold_unit,
                    column=column,
                    dq_priority=alert_priority,
                    description=description,
                    rule_conditions=rule_conditions,
                    row_scope_filtering_enabled=row_scope_filtering_enabled,
                )
            )

            attr_dq = alpha_DQRule.Attributes(
                name="",
                alpha_dq_rule_config_arguments=alpha_DQRuleConfigArguments(
                    alpha_dq_rule_threshold_object=alpha_DQRuleThresholdObject(
                        alpha_dq_rule_threshold_compare_operator=threshold_compare_operator,
                        alpha_dq_rule_threshold_value=threshold_value,
                        alpha_dq_rule_threshold_unit=threshold_unit,
                    ),
                    alpha_dq_rule_config_arguments_raw=config_arguments_raw,
                    alpha_dq_rule_config_rule_conditions=rule_conditions,
                ),
                alpha_dq_rule_base_dataset_qualified_name=asset.qualified_name,
                alpha_dq_rule_alert_priority=alert_priority,
                alpha_dq_rule_row_scope_filtering_enabled=row_scope_filtering_enabled,
                alpha_dq_rule_source_sync_status=alpha_DQSourceSyncStatus.IN_PROGRESS,
                alpha_dq_rule_status=alpha_DQRuleStatus.ACTIVE,
                alpha_dq_rule_base_dataset=asset,
                qualified_name=f"{asset.qualified_name}/rule/{str(cls._generate_uuid())}",
                alpha_dq_rule_dimension=dimension,
                alpha_dq_rule_template_name=template_rule_name,
                alpha_dq_rule_template=alpha_DQRuleTemplate.ref_by_qualified_name(
                    qualified_name=template_qualified_name  # type: ignore
                ),
            )

            if column is not None:
                attr_dq.alpha_dq_rule_base_column_qualified_name = column.qualified_name
                attr_dq.alpha_dq_rule_base_column = column  # type: ignore

            if custom_sql is not None:
                attr_dq.alpha_dq_rule_custom_s_q_l = custom_sql
                attr_dq.display_name = rule_name
                if description is not None:
                    attr_dq.user_description = description

            return attr_dq
