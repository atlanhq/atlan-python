
    @overload
    @classmethod
    def creator(
        cls,
        *,
        name: str,
        collection_qualified_name: str,
    ) -> Query: ...

    @overload
    @classmethod
    def creator(
        cls,
        *,
        name: str,
        parent_folder_qualified_name: str,
    ) -> Query: ...

    @classmethod
    @init_guid
    def creator(
        cls,
        *,
        name: str,
        collection_qualified_name: Optional[str] = None,
        parent_folder_qualified_name: Optional[str] = None,
    ) -> Query:
        validate_required_fields(["name"], [name])
        return Query(
            attributes=Query.Attributes.creator(
                name=name,
                collection_qualified_name=collection_qualified_name,
                parent_folder_qualified_name=parent_folder_qualified_name,
            )
        )

    @classmethod
    @init_guid
    def updater(
        cls,
        *,
        name: str,
        qualified_name: str,
        collection_qualified_name: str,
        parent_qualified_name: str,
    ) -> Query:
        from pyatlan.model.assets import Collection, Folder

        validate_required_fields(
            ["name", "collection_qualified_name", "parent_qualified_name"],
            [name, collection_qualified_name, parent_qualified_name],
        )
        if collection_qualified_name == parent_qualified_name:
            parent = Collection.ref_by_qualified_name(collection_qualified_name)
        else:
            parent = Folder.ref_by_qualified_name(parent_qualified_name)  # type: ignore[assignment]

        query = Query(
            attributes=Query.Attributes(qualified_name=qualified_name, name=name)
        )
        query.parent = parent
        query.collection_qualified_name = collection_qualified_name
        query.parent_qualified_name = parent_qualified_name
        return query

    def with_raw_query(self, schema_qualified_name: str, query: str):
        _DEFAULT_VARIABLE_SCHEMA = dumps(
            {
                "customvariablesDateTimeFormat": {
                    "defaultDateFormat": "YYYY-MM-DD",
                    "defaultTimeFormat": "HH:mm",
                },
                "customVariables": [],
            }
        )
        connection_qn, connector_name = AtlanConnectorType.get_connector_name(
            schema_qualified_name, "schema_qualified_name", 5
        )
        tokens = schema_qualified_name.split("/")
        database_qn = f"{tokens[0]}/{tokens[1]}/{tokens[2]}/{tokens[3]}"
        self.connection_name = connector_name
        self.connection_qualified_name = connection_qn
        self.default_database_qualified_name = database_qn
        self.default_schema_qualified_name = schema_qualified_name
        self.is_visual_query = False
        self.raw_query_text = query
        self.variables_schema_base64 = b64encode(
            _DEFAULT_VARIABLE_SCHEMA.encode("utf-8")
        ).decode("utf-8")
