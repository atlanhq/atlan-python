

    _subtypes_:Dict[str, type] = dict()

    def __init_subclass__(cls, type_name=None):
        cls._subtypes_[type_name or cls.__name__.lower()] = cls

    def trim_to_required(self:SelfAsset) -> SelfAsset:
        return self.create_for_modification(qualified_name=self.qualified_name or "", name=self.name or "")

    def trim_to_reference(self:SelfAsset) -> SelfAsset:
        if self.guid and self.guid.strip():
            return self.ref_by_guid(self.guid)
        if self.qualified_name and self.qualified_name.strip():
            return self.ref_by_qualified_name(self.qualified_name)
        if (
            self.unique_attributes
            and (qualified_name := self.unique_attributes.get("qualified_name"))
            and qualified_name.strip()
        ):
            return self.ref_by_qualified_name(qualified_name)
        raise ErrorCode.MISSING_REQUIRED_RELATIONSHIP_PARAM.exception_with_parameters(self.type_name, "guid, qualifiedName")

    @classmethod
    @init_guid
    def creator(cls: Type[SelfAsset], *args, **kwargs) -> SelfAsset:
        raise NotImplementedError(
            "Creator has not been implemented for this class. "
            "Please submit an enhancement request if you need it implemented."
        )

    @classmethod
    @init_guid
    def create(cls: Type[SelfAsset], *args, **kwargs) -> SelfAsset:
        warn(
            (
                "This method is deprecated, please use 'creator' "
                "instead, which offers identical functionality."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return cls.creator(*args, **kwargs)

    @classmethod
    @init_guid
    def updater(
        cls: type[SelfAsset], qualified_name: str = "", name: str = ""
    ) -> SelfAsset:
        if cls.__name__ == "Asset":
            raise ErrorCode.METHOD_CAN_NOT_BE_INVOKED_ON_ASSET.exception_with_parameters()
        validate_required_fields(
            ["name", "qualified_name"],
            [name, qualified_name],
        )
        return cls(attributes=cls.Attributes(qualified_name=qualified_name, name=name))

    @classmethod
    def create_for_modification(
        cls: type[SelfAsset], qualified_name: str = "", name: str = ""
    ) -> SelfAsset:
        warn(
            (
                "This method is deprecated, please use 'updater' "
                "instead, which offers identical functionality."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return cls.updater(qualified_name=qualified_name, name=name)

    @classmethod
    def ref_by_guid(
        cls: type[SelfAsset], guid: str, semantic: SaveSemantic = SaveSemantic.REPLACE
    ) -> SelfAsset:
        retval: SelfAsset = cls(attributes=cls.Attributes())
        retval.guid = guid
        retval.semantic = semantic
        return retval

    @classmethod
    def ref_by_qualified_name(
        cls: type[SelfAsset],
        qualified_name: str,
        semantic: SaveSemantic = SaveSemantic.REPLACE,
    ) -> SelfAsset:
        ret_value: SelfAsset = cls(
            attributes=cls.Attributes(name="", qualified_name=qualified_name)
        )
        ret_value.unique_attributes = {"qualifiedName": qualified_name}
        ret_value.semantic = semantic
        return ret_value

    @classmethod
    def __get_validators__(cls):
        yield cls._convert_to_real_type_

    @classmethod
    def _convert_to_real_type_(cls, data):
        if isinstance(data, Asset):
            return data

        # Handle the case where asset data is a list
        if isinstance(data, list):
            return [cls._convert_to_real_type_(item) for item in data]

        data_type = (
            data.get("type_name") if "type_name" in data else data.get("typeName")
        )

        if data_type is None:
            if issubclass(cls, Asset):
                return cls(**data)
            raise ValueError("Missing 'type' in Asset")

        sub = cls._subtypes_.get(data_type)
        if sub is None:
            sub = getattr(sys.modules["pyatlan.model.assets"], data_type)

        if sub is None:
            raise TypeError(f"Unsupport sub-type: {data_type}")

        return sub(**data)

    if TYPE_CHECKING:
        from pyatlan.model.lineage import FluentLineage

    @classmethod
    def lineage(cls, guid: str, include_archived: bool = False) -> "FluentLineage":
        """
        Start a FluentLineage that can be used to get a LineageListRequest that can be used to retrieve all downstream
        assets. Additional conditions can be chained onto the returned FluentLineage before any asset retrieval is
        attempted, ensuring all conditions are pushed-down for optimal retrieval. (To change the default direction of
        downstream chain a .direction() call

        :param guid: unique identifier (GUID) for the starting point of lineage
        :param include_archived: when True, archived (soft-deleted) assets in lineage will be included
        :returns: a FluentLineage that can be used to get a LineageListRequest that can be used to retrieve all
        downstream assets
        """
        from pyatlan.model.lineage import FluentLineage

        if not include_archived:
            return FluentLineage(
                starting_guid=guid,
                where_assets=FluentLineage.ACTIVE,
                where_relationships=FluentLineage.ACTIVE,
                includes_in_results=FluentLineage.ACTIVE,
            )
        return FluentLineage(starting_guid=guid)

    def has_announcement(self) -> bool:
        return bool(
            self.attributes
            and (
                self.attributes.announcement_title
                or self.attributes.announcement_type
            )
        )

    def set_announcement(self, announcement: Announcement) -> None:
        self.attributes.announcement_type = announcement.announcement_type.value
        self.attributes.announcement_title = announcement.announcement_title
        self.attributes.announcement_message = announcement.announcement_message

    def get_announcment(self) -> Optional[Announcement]:
        if self.attributes.announcement_type and self.attributes.announcement_title:
            return Announcement(
                announcement_type=AnnouncementType[
                    self.attributes.announcement_type.upper()
                ],
                announcement_title=self.attributes.announcement_title,
                announcement_message=self.attributes.announcement_message,
            )
        return None

    def remove_announcement(self):
        self.attributes.remove_announcement()

    def remove_description(self):
        self.attributes.remove_description()

    def remove_user_description(self):
        self.attributes.remove_user_description()

    def remove_owners(self):
        self.attributes.remove_owners()

    def remove_certificate(self):
        self.attributes.remove_certificate()
