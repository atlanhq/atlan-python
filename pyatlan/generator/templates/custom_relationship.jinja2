from __future__ import annotations

from typing import Any, Optional

from pydantic.v1 import Field, validator

from pyatlan.model.assets import Asset
from pyatlan.model.assets.relations import RelationshipAttributes
from pyatlan.model.core import AtlanObject
from pyatlan.model.enums import SaveSemantic, AtlasGlossaryTermRelationshipStatus


class {{ relationship_info.name | to_cls_name }}(RelationshipAttributes):
    type_name: str = Field(
        allow_mutation=False,
        default="{{ relationship_info.name }}",
        description="{{ relationship_info.description }}",
    )
    attributes: {{ relationship_info.name | to_cls_name }}.Attributes = Field(  # type: ignore[name-defined]
        default_factory=lambda: {{ relationship_info.name | to_cls_name }}.Attributes(),
        description="Map of attributes in the instance and their values",
    )

    class Attributes(AtlanObject):
        {% for attribute_def in relationship_info.attribute_defs -%}
        {{ attribute_def["name"] | to_snake_case }}: Optional[{{ attribute_def["typeName"] | get_type }}] = Field(
            default=None,
            description="{{ attribute_def["description"] }}",
        )
        {% endfor %}

    def __init__(__pydantic_self__, **data: Any) -> None:
        if "attributes" not in data:
            data = {"attributes": data}
        super().__init__(**data)
        __pydantic_self__.__fields_set__.update(["attributes", "type_name"])

    class {{ relationship_info.end_def1["name"] | to_cls_name }}(Asset):
        type_name: str = Field(
            default="{{ relationship_info.name }}",
            description="{{ relationship_info.end_def1["description"] or 'Name of the relationship type that defines the relationship.'}}",
        )
        relationship_type: str = Field(
            default="{{ relationship_info.name }}",
            description="Fixed typeName for {{ relationship_info.name }}.",
        )
        relationship_attributes: {{ relationship_info.name | to_cls_name }} = Field(
            default=None,
            description="Attributes of the {{ relationship_info.name }}.",
        )

        @validator("type_name")
        def validate_type_name(cls, v):
            return v

        def __init__(__pydantic_self__, **data: Any) -> None:
            super().__init__(**data)
            __pydantic_self__.__fields_set__.update(["type_name", "relationship_type"])

    {% if relationship_info.end_def1 != relationship_info.end_def2 %}
    class {{ relationship_info.end_def2["name"] | to_cls_name }}(Asset):
        type_name: str = Field(
            default="{{ relationship_info.name }}",
            description="{{ relationship_info.end_def2["description"] or 'Name of the relationship type that defines the relationship.'}}",
        )
        relationship_type: str = Field(
            default="{{ relationship_info.name }}",
            description="Fixed typeName for {{ relationship_info.name }}.",
        )
        relationship_attributes: {{ relationship_info.name | to_cls_name }} = Field(
            default=None,
            description="Attributes of the {{ relationship_info.name }}.",
        )

        @validator("type_name")
        def validate_type_name(cls, v):
            return v

        def __init__(__pydantic_self__, **data: Any) -> None:
            super().__init__(**data)
            __pydantic_self__.__fields_set__.update(["type_name", "relationship_type"])
    {% endif %}

    def {{ relationship_info.end_def1["name"] | to_snake_case }}(
        self, related: Asset, semantic: SaveSemantic = SaveSemantic.REPLACE
    ) -> {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def1["name"] | to_cls_name }}:
        """
        Build the {{ relationship_info.name | to_cls_name }} relationship (with attributes) into a related object.

        :param: related asset to which to build the detailed relationship
        :param: semantic to use for saving the relationship
        :returns: a detailed Atlan relationship that conforms
        to the necessary interface for a related asset
        """
        if related.guid:
            return {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def1["name"] | to_cls_name }}._create_ref(
                type_name=related.type_name,
                guid=related.guid,
                semantic=semantic,
                relationship_attributes=self,
            )

        # If the related asset does not have a GUID, we use qualifiedName
        return {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def1["name"] | to_cls_name }}._create_ref(
            type_name=related.type_name,
            unique_attributes={"qualifiedName": related.qualified_name},
            semantic=semantic,
            relationship_attributes=self,
        )

    {% if relationship_info.end_def1 != relationship_info.end_def2 %}
    def {{ relationship_info.end_def2["name"] | to_snake_case }}(
        self, related: Asset, semantic: SaveSemantic = SaveSemantic.REPLACE
    ) -> {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def2["name"] | to_cls_name }}:
        """
        Build the {{ relationship_info.name | to_cls_name }} relationship (with attributes) into a related object.

        :param: related asset to which to build the detailed relationship
        :param: semantic to use for saving the relationship
        :returns: a detailed Atlan relationship that conforms
        to the necessary interface for a related asset
        """
        if related.guid:
            return {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def2["name"] | to_cls_name }}._create_ref(
                type_name=related.type_name,
                guid=related.guid,
                semantic=semantic,
                relationship_attributes=self,
            )

        # If the related asset does not have a GUID, we use qualifiedName
        return {{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def2["name"] | to_cls_name }}._create_ref(
            type_name=related.type_name,
            unique_attributes={"qualifiedName": related.qualified_name},
            semantic=semantic,
            relationship_attributes=self,
        )
    {% endif %}


{{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def1["name"] | to_cls_name }}.update_forward_refs()
{% if relationship_info.end_def1 != relationship_info.end_def2 -%}
{{ relationship_info.name | to_cls_name }}.{{ relationship_info.end_def2["name"] | to_cls_name }}.update_forward_refs()
{% endif -%}
{{ relationship_info.name | to_cls_name }}.update_forward_refs()
