name: Pyatlan Pull Request Build

on:
  pull_request:
  workflow_dispatch:

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Specify version as a string
        # https://github.com/actions/setup-python/issues/160"
        python-version: ["3.8", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938  # v4.2.0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: pypa/gh-action-pip-audit@v1.1.0
        with:
            # Since we used pytest for dev
            # ("py" -> library is in maintenance mode)
            # We can ignore this vulnerability here
            # Reference: https://github.com/pytest-dev/py
            ignore-vulns: |
              PYSEC-2022-42969
            summary: true
            vulnerability-service: osv
            inputs: requirements.txt requirements-dev.txt

  qa-checks-and-unit-tests:
    needs: [vulnerability-scan]
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.distribute-integration-test-files.outputs.files }}
    strategy:
      matrix:
        # Specify version as a string
        # https://github.com/actions/setup-python/issues/160"
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: QA checks (ruff-formatter, ruff-linter, mypy)
        run: |
          ./qa-checks

      - name: Run unit tests
        env: # Test tenant environment variables
          ATLAN_API_KEY: ${{ secrets.ATLAN_API_KEY }}
          ATLAN_BASE_URL: ${{ secrets.ATLAN_BASE_URL }}
        run: pytest tests/unit --cov=atlan --cov-report=xml --cov-report=term --cov-append

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: .coverage
          retention-days: 7

      - name: Prepare integration tests distribution
        id: distribute-integration-test-files
        run: |
          test_ignore_file=tests/integration/.testignore.txt
          files=$(ls tests/integration/test_*.py tests/integration/*_test.py | grep -v -f $test_ignore_file | tr '\n' ' ')
          json_files=$(echo "${files[@]}" | jq -R -c 'split(" ")[:-1]')
          echo "files=$json_files" >> $GITHUB_OUTPUT

  integration-tests:
    needs: [vulnerability-scan, qa-checks-and-unit-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_file: ${{fromJson(needs.qa-checks-and-unit-tests.outputs.files)}}
    concurrency:
      group: ${{ matrix.test_file }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          # Specify version as a string
          # https://github.com/actions/setup-python/issues/160"
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-data
          path: .

      - name: Run integration test with coverage
        env:
          ATLAN_API_KEY: ${{ secrets.ATLAN_API_KEY }}
          ATLAN_BASE_URL: ${{ secrets.ATLAN_BASE_URL }}
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          timeout_minutes: 10
          command: pytest ${{ matrix.test_file }} --cov=atlan --cov-append --cov-report=xml --cov-report=term

      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: .coverage
          retention-days: 7

  finalize-coverage:
    needs: [integration-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: Download all coverage data
        uses: actions/download-artifact@v4
        with:
          name: coverage-data
          path: .

      - name: Combine coverage reports
        run: |
          pytest --cov=atlan --cov-report=html --cov-report=xml --cov-append

      - name: Upload final coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov
          retention-days: 7

      - name: Check coverage threshold
        run: |
          coverage report --fail-under=80  # Adjust threshold as needed
